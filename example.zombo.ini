[preview]
# 0 for false, 1 for true
# Only generates and prints commands, does not run them
print_only: 0

# This is a basically mini tutorial for ffmpeg.
# tl;dr: just use the args that are  uncommented if you want your videos to be smaller

[ffmpeg]
# Entire path to ffmpeg executable, e.g. c:\ffmpeg.exe
path: S:\Apps\ffmpeg-4.4.1-full_build\bin\ffmpeg.exe


# ffmpeg documentation with further details on these arguments:
# https://ffmpeg.org/ffmpeg.html

# The uncommented bit way below will convert the video and preserve everything else, subs, fonts,
#  etc. CRF controls the quality, the lower the number, the higher the quality and larger the file
#  size.

# ==================================================================================================
# Copying all the tracks in a file.

# -map 0 is kind of complicated, you'll just have to look at the FFMPEG docs if you want to
#  understand it, but in short, "-map 0 -c copy" will copy all tracks (videos, audio, subtitles,
#  fonts, etc.) unless you use "-c:<letter>" (explained below) to re-encode a track.
# https://trac.ffmpeg.org/wiki/Map

# "-c" is for codec, "-c copy" copies (no encoding) stuff into the new file.
# When you want to address specific parts you use a colon,
#  e.g., -c:a for audio and -c:v for video, and -c:s for subtitles.
# You can address specific tracks by adding an additional colon and the track index (starts at 0),
#  e.g., -c:a:1 would refer to the second audio track
# Use ffprobe and/or mediainfo (separate tool) to determine track indices.

# ==================================================================================================
# Re-encoding video.

# This applies to HEVC/x265 encoding:
# I've done a lot of side by side testing and found x265 CRF 20 to be a good middle ground, with
#  only minor visual artifacts in dark scenes which are hardly noticeable, especially if you're not
#  REALLY looking for them. In light scenes, I couldn't see a difference between the originals
#  and CRF 20; 22 is a bit smaller and still very good quality.

# ==================================================================================================
# Re-encoding audio.

# If the audio is already lossy, you probably shouldn't re-encode it, I use this for flac audio.
# Opus is better quality and lower file size than MP3, if you're re-encoding the audio,
#  I recommend the following: -c:a libopus -b:a 160k -vbr on

# Add this to the args if you want to re-encode the audio into MP3 v0 (highest quality mp3 with
#  variable bit rate).
# MP3v0 audio re-encode: -c:a libmp3lame -qscale:a 0
# see https://trac.ffmpeg.org/wiki/Encode/MP3 for other options

# ==================================================================================================
# Trimming.

# If you want to trim a video or only encode a small part for quick testing, put this at the
#  BEGINNING of your args, in HH:MM:SS format: -ss 00:02:00 -to 00:03:00
#  More info here: https://stackoverflow.com/questions/18444194/cutting-the-videos-based-on-start-and-end-time-using-ffmpeg

# ==================================================================================================
# Args to use in the command.

# All ffmpeg args to use, except for -i(input), that's handled by the file lists
args: -map 0 -c copy -c:v libx265 -crf 20

# Or use this if you also want to re-encode flac (lossless) audio
# args: -map 0 -c copy -c:v libx265 -crf 20 -c:a libopus -b:a 160k -vbr on

# ==================================================================================================
# How to enter files and paths.

# The script takes the first entry in the input list and matches it to the first entry in the
#  output list.
# The new names can be completely different, if you want to move tags like I did below, I
#  recommend using a multi line cursor to edit all of your list at the same time.
# Since this is an ini file, the only requirements are that you don't have extra line breaks
#  and the names be indented below the files line; there is no need for quotes, brackets, etc.

# Tip: In Windows Explorer, you can copy the names of multiple files at once.
#  Select your files, hold shift and right click, then use the copy as path option.
#  From there, using a multi line cursor you can easily remove all but the file names.

# The only real gotcha which can be easy to accidentally do is naming the output the same as
#  the input while writing to the same folder.

[input]
# Folder without trailing slash/backslash, e.g. S:\Anime

path: S:\Anime\Downloads
# List of file names, one per line, indented
files:
    [HorribleSubs] Best Animu Ever - 1 [1080p].mkv
    [HorribleSubs] Best Animu Ever - 2 [1080p].mkv
    [HorribleSubs] Best Animu Ever - 3 [1080p].mkv


# additional_files is only for if you have multiple inputs, e.g., you're combining multiple streams
#  into one output, like adding in another subtitle track or audio track
[additional_files]
# 0 for false, 1 for true
use_additional_files: 0
path:
files:


[output]
path: S:\Anime\Converted
files:
    Best Animu Ever - 1 [HorribleSubs][1080p][HEVC re-encode].mkv
    Best Animu Ever - 2 [HorribleSubs][1080p][HEVC re-encode].mkv
    Best Animu Ever - 3 [HorribleSubs][1080p][HEVC re-encode].mkv

